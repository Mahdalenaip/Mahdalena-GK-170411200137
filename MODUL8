NO1
#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include<iostream>

static GLfloat spin = 0.0;
bool gerak=false;

void SpecialInput(int key, int x, int y)
{
    switch(key)
    {
    case GLUT_KEY_UP:
        glColor3f(1,1,0);
        break;
    case GLUT_KEY_DOWN:
        glColor3f(0.5,0,0);
        break;
    }

glutPostRedisplay();
}

void star(){

    glBegin(GL_POLYGON);
    glVertex2f(-2,1);
    glVertex2f(-6,2);
    glVertex2f(-4,-2);
    glVertex2f(-5,-6);
    glVertex2f(0,-4);
    glVertex2f(5,-6);
    glVertex2f(4,-2);
    glVertex2f(6,2);
    glVertex2f(2,1);
    glVertex2f(0,5);
    glEnd();

}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);


    glPushMatrix();
    star();
    glPopMatrix();

    glutSwapBuffers();
}

void spinDisplay(void)
{
    spin = spin + 0.01;
    if (spin > 360.0)
    spin = spin - 360.0;
    glutPostRedisplay();
}

void init(void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glShadeModel (GL_FLAT);
}

void reshape(int w, int h)
{
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-10.0, 10.0, -10.0, 10.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
    switch (button)
    {
        case GLUT_LEFT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(spinDisplay);
            break;
        case GLUT_MIDDLE_BUTTON:
        case GLUT_RIGHT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(NULL);
            break;
        default:
            break;
    }
 }

 void keybord(){
    if (gerak == true)
    {
        gerak = false;
    }
    else if (gerak == false)
    {
        gerak = true;
        glutPostRedisplay();
    }


 }


int main(int argc, char** argv)
{
    glutInit(&argc, argv);
     glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (400, 400);
    glutInitWindowPosition (100, 100);
    glutCreateWindow (argv[0]);
    init ();
    glutDisplayFunc(display);
    glutSpecialFunc(SpecialInput);
    glutKeyboardFunc;
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
 }
NO2
#include <windows.h>

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include<iostream>



static GLfloat spin = 0.0;
int cek=0;
bool gerak = false;

void spinDisplay(void)
{
    spin = spin + 0.5;
    if (spin > 360.0)
        spin = spin - 360.0;

    glutPostRedisplay();
}


void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glPushMatrix();
    if (cek == 1)
    {
        glRotatef(spin, 0.0, 0.0, 1.0);
    }
    else if (cek==2)
    {
        glRotatef(spin, 0.0, 1.0, 0.0);
    }
    else
    {
        glRotatef(spin, 1.0, 0.0, 0.0);
    }
    glColor3f(0.0, 0.0, 1.0);
    glRectf(-25.0, -25.0, 25.0, 25.0);

    if (gerak == true)
    {
        glutIdleFunc(spinDisplay);
    }
    else if (gerak == false)
    {
        glutIdleFunc(NULL);
    }
    glutSwapBuffers();

    glPopMatrix();

}


void init(void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glShadeModel (GL_FLAT);
}

void reshape(int w, int h)
{
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-50.0, 50.0, -50.0, 50.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
    switch (button)
    {
    case GLUT_LEFT_BUTTON:
        if (state == GLUT_DOWN)
            cek=1;
        glutIdleFunc(spinDisplay);
        break;
    case GLUT_MIDDLE_BUTTON:
        if (state == GLUT_DOWN)
            cek=2;
        glutIdleFunc(spinDisplay);
        break;

    case GLUT_RIGHT_BUTTON:
        if(state==GLUT_DOWN)
            cek=3;
        glutIdleFunc(spinDisplay);
        break;
    default:
        break;
    }
}

void input(unsigned char key, int x, int y){
    if (key== 'p'|'P')
    {
        if (gerak == true)
        {
            gerak = false;
        }
        else if (gerak == false)
        {
            gerak = true;
            glutPostRedisplay();
        }
    }
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (400, 400);
    glutInitWindowPosition (100, 100);
    glutCreateWindow (argv[0]);
    init ();
    glutDisplayFunc(display);
    glutKeyboardFunc(input);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
}
NO3
#include <windows.h>

#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include<iostream>

static GLfloat spin = 0.0;
bool color=false;

void checkboard(){
   // glPushMatrix();
      glColor3f(0.0,0.0,0.5);

    for(int i=0; i<7;i++){

        for(int j=0; j<7;j++){
            if(color==true){
                glColor3f(1,1,1);
                color=false;
            }
            else{
                glColor3f(0,0,1);
                color=true;
            }

            glRecti(0,0, 5, 5);
            if(j!=6){

                    if(i%2==1){
                       glTranslated(-5,0,0);
                    }
                    else{
                         glTranslated(5,0,0);
                    }
            }
        }
        glTranslated(0,5,0);

   }

}

void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);

    //glBegin(GL_LINES);

    glPushMatrix();

    glRotatef(spin, 0.0, 0.0, 1.0);
    glTranslatef(-20,-20,0);
    checkboard();
    glPopMatrix();

    //glutSpecialFunc(SpecialInput);
    glutSwapBuffers();
}

void spinDisplay(void)
{
    spin = spin + 0.01;
    if (spin > 360.0)
    spin = spin - 360.0;
    glutPostRedisplay();
}

void init(void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glShadeModel (GL_FLAT);
}

void reshape(int w, int h)
{
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-40.0, 40.0, -40.0, 40.0, -40.0, 40.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void mouse(int button, int state, int x, int y)
{
    switch (button)
    {
        case GLUT_LEFT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(spinDisplay);
            break;
        case GLUT_MIDDLE_BUTTON:
        case GLUT_RIGHT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(NULL);
            break;
        default:
            break;
    }
 }


int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (400, 400);
    glutInitWindowPosition (100, 100);
    glutCreateWindow (argv[0]);
    init ();
    glutDisplayFunc(display);
//    glutSpecialFunc(SpecialInput);
    glutReshapeFunc(reshape);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
 }
NO4
#include <windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
#include <iostream>
#include <stdlib.h>

using namespace std;

static GLfloat spin = 0.0;
float speed = 0.1;
bool color=false;

void checkboard(){
   // glPushMatrix();
      glColor3f(0.0,0.0,0.5);

    for(int i=0; i<8;i++){

        for(int j=0; j<8;j++){
            if(color==true){
                glColor3f(1,1,1);
                color=false;
            }
            else{
                glColor3f(0,0,1);
                color=true;
            }

            glRecti(0,0, 5, 5);
            if(j!=7){

                    if(i%2==1){
                       glTranslated(-5,0,0);
                    }
                    else{
                         glTranslated(5,0,0);
                    }
            }
        }
        glTranslated(0,5,0);

   }

}
void display(void)
{
    glClear(GL_COLOR_BUFFER_BIT);
    glPushMatrix();
    glRotatef(spin, 0.0, 0.0, 1.0);
    glTranslated(-25,-25,0);
    checkboard();
    glPopMatrix();
    glutSwapBuffers();
}

void spinDisplay(void)
{
    spin = spin + speed;
    if (spin > 360.0){
        spin = spin - 360.0;
    }
    glutPostRedisplay();
}

void init(void)
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glShadeModel (GL_FLAT);
}

void reshape(int w, int h)
{
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-50.0, 50.0, -50.0, 50.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}
void input(unsigned char key, int x, int y){

    if(key == 'u'){
        glScalef(0.75, 0.75, 0);
    }
    else if(key == 'U'){
        glScalef(1.5, 1.5, 0);
    }
    else if(key == 'v'){
        speed = speed*0.5;
    }
    else if(key == 'V'){
        speed = speed*2;
    }
    glutPostRedisplay();
}
void mouse(int button, int state, int x, int y)
{
    switch (button)
    {
        case GLUT_LEFT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(spinDisplay);
            break;
        case GLUT_MIDDLE_BUTTON:
        case GLUT_RIGHT_BUTTON:
            if (state == GLUT_DOWN)
                glutIdleFunc(NULL);
            break;
        default:
            break;
    }
 }

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize (400, 400);
    glutInitWindowPosition (100, 100);
    glutCreateWindow (argv[0]);
    init ();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(input);
    glutMouseFunc(mouse);
    glutMainLoop();
    return 0;
 }
